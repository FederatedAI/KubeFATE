# Copyright 2019-2021 VMware, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{ if .Values.servingZookeeper.include }}
---
apiVersion: v1
kind: Service
metadata:
  name: serving-zookeeper
  labels:
    fateMoudle: serving-zookeeper
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate-serving
spec:
  type: ClusterIP
  ports:
    - name: tcp-client
      port: 2181
      targetPort: client
    - name: follower
      port: 2888
      targetPort: follower
    - name: tcp-election
      port: 3888
      targetPort: election
  selector:
    fateMoudle: serving-zookeeper
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
---
# Source: zookeeper/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: serving-zookeeper
  labels:
    fateMoudle: serving-zookeeper
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate-serving
spec:
  serviceName: serving-zookeeper-headless
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      fateMoudle: serving-zookeeper
      name: {{ .Values.partyName | quote }}
      partyId: {{ .Values.partyId | quote }}
  template:
    metadata:
      name: serving-zookeeper
      labels:
        fateMoudle: serving-zookeeper
        name: {{ .Values.partyName | quote }}
        partyId: {{ .Values.partyId | quote }}
        owner: kubefate
        cluster: fate-serving
    spec:
      serviceAccountName: default
      securityContext:
        fsGroup: 1001
      containers:
        - name: zookeeper
          {{- if .Values.image.isThridParty }}
          image: {{ .Values.image.registry }}/zookeeper:3.7.0
          {{- else }}
          image: bitnami/zookeeper:3.7.0
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 1001
          command:
            - bash
            - -ec
            - |
              # Execute entrypoint as usual after obtaining ZOO_SERVER_ID
              # check ZOO_SERVER_ID in persistent volume via myid
              # if not present, set based on POD hostname
              if [[ -f "/bitnami/zookeeper/data/myid" ]]; then
                export ZOO_SERVER_ID="$(cat /bitnami/zookeeper/data/myid)"
              else
                HOSTNAME=`hostname -s`
                if [[ $HOSTNAME =~ (.*)-([0-9]+)$ ]]; then
                  ORD=${BASH_REMATCH[2]}
                  export ZOO_SERVER_ID=$((ORD + 1 ))
                else
                  echo "Failed to get index from hostname $HOST"
                  exit 1
                fi
              fi
              exec /entrypoint.sh /run.sh
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          env:
            - name: ZOO_DATA_LOG_DIR
              value: ""
            - name: ZOO_PORT_NUMBER
              value: "2181"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "5"
            - name: ZOO_MAX_CLIENT_CNXNS
              value: "60"
            - name: ZOO_4LW_COMMANDS_WHITELIST
              value: "srvr, mntr, ruok"
            - name: ZOO_LISTEN_ALLIPS_ENABLED
              value: "no"
            - name: ZOO_AUTOPURGE_INTERVAL
              value: "0"
            - name: ZOO_AUTOPURGE_RETAIN_COUNT
              value: "3"
            - name: ZOO_MAX_SESSION_TIMEOUT
              value: "40000"
            - name: ZOO_SERVERS
              value: serving-zookeeper-0.serving-zookeeper-headless.default.svc.cluster.local:2888:3888::1
            - name: ZOO_ENABLE_AUTH
              value: "no"
            - name: ZOO_HEAP_SIZE
              value: "1024"
            - name: ZOO_LOG_LEVEL
              value: "ERROR"
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: client
              containerPort: 2181
            - name: follower
              containerPort: 2888
            - name: election
              containerPort: 3888
          livenessProbe:
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command: ['/bin/bash', '-c', 'echo "ruok" | timeout 2 nc -w 2 localhost 2181 | grep imok']
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: data
              mountPath: /bitnami/zookeeper
              subPath: {{ .Values.servingZookeeper.subPath }}
      {{- with .Values.servingZookeeper.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.servingZookeeper.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.servingZookeeper.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 6 }}
      {{- end }}
      serviceAccountName:  {{ template "serviceAccountName" . }}
      restartPolicy: Always
      volumes:
        {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- else }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.servingZookeeper.existingClaim | default  "serving-redis-data" }}
        {{- end }}
        
  {{- if and .Values.persistence.enabled (not .Values.servingZookeeper.existingClaim) }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          fateMoudle: serving-zookeeper
          name: {{ .Values.partyName | quote }}
          partyId: {{ .Values.partyId | quote }}
          owner: kubefate
          cluster: fate-serving
      spec:
        {{- if .Values.servingZookeeper.storageClass }}
          {{- if eq "-" .Values.servingZookeeper.storageClass }}
        storageClassName: ""
          {{- else }}
        storageClassName: {{ .Values.servingZookeeper.storageClass }}
          {{- end }}
        {{- end }}
        accessModes: 
        - {{ .Values.servingZookeeper.accessMode }}
        resources:
          requests:
            storage: {{ .Values.servingZookeeper.size }}
          
  {{- end }}
{{- end }}
