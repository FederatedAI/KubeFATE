# Copyright 2019-2020 VMware, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{ if .Values.servingProxy.include }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: serving-proxy-config
  labels:
    fateMoudle: serving-proxy
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote }}
    owner: kubefate
    cluster: fate-serving
data:
  application.properties: |
    #
    # Copyright 2019 The FATE Authors. All Rights Reserved.
    #
    # Licensed under the Apache License, Version 2.0 (the "License");
    # you may not use this file except in compliance with the License.
    # You may obtain a copy of the License at
    #
    #     http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    #
    # coordinator same as Party ID
    coordinator={{ .Values.partyId }}
    server.port=8059
    #inference.service.name=serving
    #random, consistent
    #routeType=random
    route.table=/data/projects/fate/serving-proxy/conf/route_table/route_table.json
    #auth.file=/data/projects/fate/serving-proxy/conf/auth_config.json
    # zk router
    useZkRouter=true
    useRegister=true
    zk.url=serving-zookeeper:2181
    # zk acl
    #acl.enable=false
    #acl.username=
    #acl.password=
    # intra-partyid port
    #proxy.grpc.intra.port=8879
    # inter-partyid port
    #proxy.grpc.inter.port=8869
    # grpc
    #proxy.grpc.inference.timeout=3000
    #proxy.grpc.inference.async.timeout=1000
    #proxy.grpc.unaryCall.timeout=3000
    #proxy.grpc.threadpool.coresize=50
    #proxy.grpc.threadpool.maxsize=100
    #proxy.grpc.threadpool.queuesize=10
    #proxy.async.timeout=5000
    #proxy.async.coresize=10
    #proxy.async.maxsize=100
    #proxy.grpc.batch.inference.timeout=10000
    
  route_table.json: |
    {
        "route_table": {
          "default": {
            "default": [
                {
                  {{- with .Values.servingProxy.exchange }}
                    "ip": "{{ .partyIp }}",
                    "port": {{ .partyPort }}
                  {{- else }}
                    "ip": "default-serving-proxy",
                    "port": 8869
                  {{- end }}
                }
            ]
          },
            {{- range .Values.servingProxy.partyList }}
            {{ .partyId | quote}}: {
                "default": [
                    {
                        "ip": {{ .partyIp | quote }},
                        "port": {{ .partyPort | quote }}
                    }
                ]
            },
            {{- end }}
            {{ .Values.partyId | quote }}: {
                "default": [
                    {
                        "ip": "serving-proxy",
                        "port": 8059
                    }
                ],
                "serving": [
                    {
                        "ip": "serving-server",
                        "port": 8000
                    }
                ]
            }
        },
        "permission": {
          "default_allow": true
        }
    }
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: serving-proxy
  labels:
    fateMoudle: serving-proxy
    name: {{ .Values.partyName  | quote  }}
    partyId: {{ .Values.partyId | quote  }}
    owner: kubefate
    cluster: fate-serving
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      fateMoudle: serving-proxy
      name: {{ .Values.partyName  | quote }}
      partyId: {{ .Values.partyId | quote  }}
  template:
    metadata:
      labels:
        fateMoudle: serving-proxy
        name: {{ .Values.partyName | quote  }}
        partyId: {{ .Values.partyId | quote  }}
        owner: kubefate
        cluster: fate-serving
    spec:
      containers:
        - image: {{ .Values.image.registry }}/serving-proxy:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: serving-proxy
          ports:
            - containerPort: 8059
            - containerPort: 8869
          volumeMounts:
            - mountPath: /data/projects/fate/serving-proxy/conf/application.properties
              name: serving-proxy-confs
              subPath: application.properties
            - mountPath: /data/projects/fate/serving-proxy/conf/route_table
              name: serving-proxy-confs
      {{- with .Values.servingProxy.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.servingProxy.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.servingProxy.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 6 }}
      {{- end }}
      serviceAccountName: {{ template "serviceAccountName" . }}
      restartPolicy: Always
      volumes:
        - name: serving-proxy-confs
          configMap:
            name: serving-proxy-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    fateMoudle: serving-proxy
    name: {{ .Values.partyName | quote  }}
    partyId: {{ .Values.partyId | quote }}
    owner: kubefate
    cluster: fate-serving
  name: serving-proxy
spec:
  ports:
    - name: "8059"
      port: 8059
      targetPort: 8059
      protocol: TCP
    - name: "8869"
      port: 8869
      targetPort: 8869
      nodePort: {{ .Values.servingProxy.nodePort }}
      protocol: TCP
    - name: "8879"
      port: 8879
      targetPort: 8879
      protocol: TCP
  type: {{ .Values.servingProxy.type }}
  {{- if .Values.servingProxy.loadBalancerIP }}
  loadBalancerIP: "{{ .Values.servingProxy.loadBalancerIP }}"
  {{- end }}
  selector:
    fateMoudle: serving-proxy
    name: {{ .Values.partyName | quote }}
    partyId: {{ .Values.partyId | quote  }}
---
{{ end }}