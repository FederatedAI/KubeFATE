# Copyright 2019-2020 VMware, Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{ if .Values.modules.python.include }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: python-config
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
data:
  spark-defaults.conf: |
    spark.master                      {{  .Values.modules.python.spark.master | default "spark://spark-master:7077"}}
    spark.driver.host                 {{  .Values.modules.python.spark.driverHost | default "fateflow" }}
    {{- if .Values.modules.python.spark.driverStartPort }}
    spark.driver.port                 {{  .Values.modules.python.spark.driverStartPort }}
    {{- end }}
    
    {{- if .Values.modules.python.spark.portMaxRetries }}
    spark.port.maxRetries             {{  .Values.modules.python.spark.portMaxRetries }}
    {{- end }}
    
    {{- if .Values.modules.python.spark.blockManagerStartPort }}
    spark.blockManager.port           {{  .Values.modules.python.spark.blockManagerStartPort }}
    {{- end }}
    
    {{- if .Values.modules.python.spark.blockManagerStartPort }}
    spark.driver.bindAddress          0.0.0.0
    {{- end }}
    
    {{- if .Values.modules.python.spark.pysparkPython }}
    spark.pyspark.python              {{  .Values.modules.python.spark.pysparkPython }}
    spark.pyspark.driver.python       python
    {{- end }}
  service_conf.yaml: |
    use_registry: {{ .Values.modules.serving.useRegistry | default false }}
    use_deserialize_safe_module: false
    dependent_distribution: false
    fateflow:
      # you must set real ip address, 127.0.0.1 and 0.0.0.0 is not supported
      host: {{ if .Values.istio.enabled }}127.0.0.1{{ else }}fateflow{{ end }}
      http_port: 9380
      grpc_port: 9360
      # http_app_key:
      # http_secret_key:
      # support rollsite/nginx/fateflow as a coordination proxy
      # rollsite support fate on eggroll, use grpc protocol
      # nginx support fate on eggroll and fate on spark, use http or grpc protocol, default is http
      # fateflow support fate on eggroll and fate on spark, use http protocol, but not support exchange network mode
    
      # format(proxy: rollsite) means rollsite use the rollsite configuration of fate_one_eggroll and nginx use the nginx configuration of fate_one_spark
      # you also can customize the config like this(set fateflow of the opposite party as proxy):
      # proxy:
      #   name: fateflow
      #   host: xx
      #   http_port: xx
      #   grpc_port: xx 
      {{- if eq .Values.modules.python.backend "spark_pulsar" "spark_rabbitmq" }}
      proxy: nginx
      {{- else }}
      proxy: rollsite
      {{- end }}
      # support default/http/grpc
      protocol: default
      # It can also be specified in the job configuration using the federated_status_collect_type parameter
      default_federated_status_collect_type: PULL
    database:
      name: '{{ .Values.externalMysqlDatabase | default .Values.modules.mysql.database | default "eggroll_meta" }}'
      user: '{{ .Values.externalMysqlUser | default .Values.modules.mysql.user | default "fate" }}'
      passwd: '{{ .Values.externalMysqlPassword | default .Values.modules.mysql.password | default "fate_dev" }}'
      host: '{{ .Values.externalMysqlIp | default .Values.modules.mysql.ip | default "mysql" }}'
      port: {{ .Values.externalMysqlPort | default .Values.modules.mysql.port | default "3306" }}
      max_connections: 100
      stale_timeout: 30
     # zookeeper:
       # hosts:
         # - 127.0.0.1:2181
       # use_acl: false
       # user: fate
       # password: fate
       # engine services
    default_engines:
      {{- if eq .Values.modules.python.backend  "spark_pulsar" }}
      computing: spark
      federation: pulsar
      storage: hdfs
      {{- else if eq .Values.modules.python.backend  "spark_rabbitmq" }}
      computing: spark
      federation: rabbitmq
      storage: hdfs
      {{- else }}
      computing: eggroll
      federation: eggroll
      storage: eggroll
      {{- end }}
    fate_on_standalone:
      standalone:
        cores_per_node: 20
        nodes: 1
    fate_on_eggroll:
      clustermanager:
        cores_per_node: {{ .Values.modules.python.clustermanager.cores_per_node | default 16 }}
        nodes: {{ .Values.modules.python.clustermanager.nodes | default 2 }}
      rollsite:
        host: {{ .Values.modules.rollsite.ip }}
        port: 9370
    fate_on_spark:
      spark:
        # default use SPARK_HOME environment variable
        home: /data/projects/spark-2.4.1-bin-hadoop2.7/
        cores_per_node: {{ .Values.modules.python.spark.cores_per_node }}
        nodes: {{ .Values.modules.python.spark.nodes }}
      linkis_spark:
        cores_per_node: 20
        nodes: 2
        host: 127.0.0.1
        port: 9001
        token_code: MLSS
        python_path: /data/projects/fate/python
      hive:
        host: 127.0.0.1
        port: 10000
        auth_mechanism:
        username:
        password:
      linkis_hive:
        host: 127.0.0.1
        port: 9001
      hdfs:
        name_node: {{ .Values.modules.python.hdfs.name_node | default "hdfs://namenode:9000" }}
        # default /
        path_prefix: {{ .Values.modules.python.hdfs.path_prefix }}
      rabbitmq:
        host: {{ .Values.modules.python.rabbitmq.host }}
        mng_port: {{ .Values.modules.python.rabbitmq.mng_port }}
        port: {{ .Values.modules.python.rabbitmq.port }}
        user: {{ .Values.modules.python.rabbitmq.user }}
        password: {{ .Values.modules.python.rabbitmq.password }}
        # default conf/rabbitmq_route_table.yaml
        route_table: conf/rabbitmq_route_table/rabbitmq_route_table.yaml
      pulsar:
        host: {{ .Values.modules.python.pulsar.host }}
        port: {{ .Values.modules.python.pulsar.port }}
        mng_port: {{ .Values.modules.python.pulsar.mng_port }}
        topic_ttl: 3
        # default conf/pulsar_route_table.yaml
        route_table: conf/pulsar_route_table/pulsar_route_table.yaml
      nginx:
        host: {{ .Values.modules.python.nginx.host }}
        http_port: {{ .Values.modules.python.nginx.http_port }}
        grpc_port: {{ .Values.modules.python.nginx.grpc_port }}
    fateboard:
      host: fateboard
      port: 8080
    # on API `/model/load` and `/model/load/do`
    # automatic upload models to the model store if it exists locally but does not exist in the model storage
    # or download models from the model store if it does not exist locally but exists in the model storage
    # this config will not affect API `/model/store` or `/model/restore`
    enable_model_store: false
    model_store_address:
      storage: mysql
      name: {{ .Values.externalMysqlDatabase | default .Values.modules.mysql.database | default "eggroll_meta" }}
      host: '{{ .Values.externalMysqlIp | default .Values.modules.mysql.ip | default "mysql" }}'
      port: {{ .Values.externalMysqlPort | default .Values.modules.mysql.port | default "3306" }}
      user: '{{ .Values.externalMysqlUser | default .Values.modules.mysql.user | default "fate" }}'
      passwd: '{{ .Values.externalMysqlPassword | default .Values.modules.mysql.password | default "fate_dev" }}'
      max_connections: 10
      stale_timeout: 10
    {{- with .Values.modules.serving }}
    servings:
      hosts:
      {{- if and .ip .port}}
      - '{{ .ip }}:{{ .port }}'
      {{- else }}
      - ''
      {{- end }}
      {{- if and .useRegistry .zookeeper }}
    zookeeper:
{{ toYaml .zookeeper | indent 6 }}
      {{- end }}
    {{- end }}
  transfer_conf.yaml: |
    paths: # dir or path
      - "python/federatedml/transfer_variable/auth_conf"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: fateboard-config
  labels:
    fateMoudle: fateboard
{{ include "fate.labels" . | indent 4 }}
data:
  application.properties: |
    server.port=8080
    fateflow.url=http://{{ if .Values.istio.enabled }}127.0.0.1{{ else }}fateflow{{ end }}:9380
    spring.datasource.driver-Class-Name=com.mysql.cj.jdbc.Driver
    spring.http.encoding.charset=UTF-8
    spring.http.encoding.enabled=true
    server.tomcat.uri-encoding=UTF-8
    fateboard.datasource.jdbc-url=jdbc:mysql://{{ .Values.externalMysqlIp | default .Values.modules.mysql.ip | default "mysql" }}:{{ .Values.externalMysqlPort | default .Values.modules.mysql.port | default "3306" }}/{{ .Values.externalMysqlDatabase | default .Values.modules.mysql.database | default "eggroll_meta" }}?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&serverTimezone=GMT%2B8
    fateboard.datasource.username={{ .Values.externalMysqlUser | default .Values.modules.mysql.user | default "fate" }}
    fateboard.datasource.password={{ .Values.externalMysqlPassword | default .Values.modules.mysql.password | default "fate_dev" }}
    server.tomcat.max-threads=1000
    server.tomcat.max-connections=20000
    spring.servlet.multipart.max-file-size=10MB
    spring.servlet.multipart.max-request-size=100MB
    spring.datasource.druid.filter.config.enabled=false
    spring.datasource.druid.web-stat-filter.enabled=false
    spring.datasource.druid.stat-view-servlet.enabled=false
    server.compression.enabled=true
    server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain
    server.board.login.username={{ .Values.modules.fateboard.username }}
    server.board.login.password={{ .Values.modules.fateboard.password }}
    #server.ssl.key-store=classpath:
    #server.ssl.key-store-password=
    #server.ssl.key-password=
    #server.ssl.key-alias=
    spring.session.store-type=jdbc
    spring.session.jdbc.initialize-schema=always
    #HTTP_APP_KEY=
    #HTTP_SECRET_KEY=
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: pulsar-route-table
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
data:
  pulsar_route_table.yaml: |
    {{- with .Values.modules.pulsar.exchange }}
    default:
      proxy: "{{ .ip }}:{{ .port }}"
      domain: "{{ .domain }}"
    {{- end }}
{{- if .Values.modules.pulsar.route_table }}
{{- range $key, $val := .Values.modules.pulsar.route_table }}
    {{ $key }}:
{{ toYaml . | indent 6 }}
{{- end }}
{{- else }}
    {{ .Values.partyId }}:
      host: pulsar
      port: 6650
      sslPort: 6651
      proxy: ""
{{- end}}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: rabbitmq-route-table
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
data:
  rabbitmq_route_table.yaml: |
{{- if .Values.modules.rabbitmq.route_table }}
{{- range $key, $val := .Values.modules.rabbitmq.route_table }}
    {{ $key }}:
{{ toYaml . | indent 6 }}
{{- end }}
{{- else }}
    {{ .Values.partyId }}:
      host: rabbitmq
      port: 5672
{{- end}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      fateMoudle: python
{{ include "fate.matchLabels" . | indent 6 }}
  template:
    metadata:
      labels:
        fateMoudle: python
{{ include "fate.labels" . | indent 8 }}
    spec:
      {{- if .Values.istio.enabled }}
      {{- else }}
      initContainers:
      {{- if .Values.image.isThridParty }}
      - image: {{ .Values.image.registry }}/mysql:8
      {{- else }}
      - image: mysql:8
      {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: ping-mysql
        env:
        - name: MYSQL_DATABASE
          value: "{{ .Values.externalMysqlDatabase | default .Values.modules.mysql.database | default "eggroll_meta" }}"
        - name: MYSQL_USER
          value: "{{ .Values.externalMysqlUser | default .Values.modules.mysql.user | default "fate" }}"
        - name: MYSQL_PASSWORD
          value: "{{ .Values.externalMysqlPassword | default .Values.modules.mysql.password | default "fate_dev" }}"
        - name: MYSQL_HOST
          value: "{{ .Values.externalMysqlIp | default .Values.modules.mysql.ip | default "mysql" }}"
        - name: MYSQL_PORT
          value: "{{ .Values.externalMysqlPort | default .Values.modules.mysql.port | default "3306" | }}"
        command:
        - /bin/bash
        - -c
        - |
          set -x
          function checkMySQL(){
            checkMySQLCount=0
            while true ; do
              checkMySQLCount=$[checkMySQLCount+1]
              echo "Waiting for mysql started. check count: $checkMySQLCount"
              sleep 2

              state=`mysqladmin ping -h ${MYSQL_HOST} --port=${MYSQL_PORT} -u${MYSQL_USER} -p${MYSQL_PASSWORD}| awk '{print $3}'`
              if [ "$state" == "alive" ]; then
                echo "mysql server has been already started."
              break
              fi
           done
          }
          echo "Waiting for mysql started..."
          checkMySQL
      {{- end }}
      containers:
        - name: python
          {{- if eq .Values.modules.python.backend "spark_pulsar" "spark_rabbitmq" }}
          image: {{ .Values.image.registry }}/python-spark:{{ .Values.image.tag }}
          {{- else }}
          image: {{ .Values.image.registry }}/{{ if .Values.modules.python.enabledNN }}python-nn{{ else }}python{{ end }}:{{ .Values.image.tag }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.modules.python.resources}}
          resources:
          {{- range $key, $val := .Values.modules.python.resources }}
            {{ $key }}:
{{ toYaml $val | indent 14 }}
          {{- end }}
          {{- end }}
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: PYTHONPATH
            value: "$PYTHONPATH:/data/projects/fate/fate/python:/data/projects/fate/eggroll/python:/data/projects/fate/fateflow/python:/data/projects/fate/fate/python/fate_client"
          - name: FATE_PROJECT_BASE
            value: "/data/projects/fate"
          {{- if eq .Values.modules.python.backend "spark_pulsar" "spark_rabbitmq" }}
          - name: FATE_FLOW_UPLOAD_MAX_NUM
            value: "1000000"
          - name: FATE_FLOW_UPLOAD_MAX_BYTES
            value: "104868093952"
          {{- end }}
          ports:
            - containerPort: 9360
            - containerPort: 9380
          command:
            - /bin/bash
            - -c
            - |
                set -x
                mkdir -p /data/projects/fate/conf/
                cp /data/projects/fate/conf-tmp/transfer_conf.yaml /data/projects/fate/conf/transfer_conf.yaml
                cp /data/projects/fate/conf-tmp/service_conf.yaml /data/projects/fate/conf/service_conf.yaml
                # fix fateflow conf must use IP
                sed -i "s/host: fateflow/host: ${POD_IP}/g" /data/projects/fate/conf/service_conf.yaml
                
                cp /data/projects/spark-2.4.1-bin-hadoop2.7/conf/spark-defaults-template.conf /data/projects/spark-2.4.1-bin-hadoop2.7/conf/spark-defaults.conf
                sed -i "s/fateflow/${POD_IP}/g" /data/projects/spark-2.4.1-bin-hadoop2.7/conf/spark-defaults.conf
                
                sleep 5 && python fateflow/python/fate_flow/fate_flow_server.py
          volumeMounts:
            - mountPath: /data/projects/fate/eggroll/conf/eggroll.properties
              name: eggroll-confs
              subPath: eggroll.properties
            - name: python-data
              mountPath: /data/projects/fate/fate_flow/logs
              subPath: logs
            - mountPath: /data/projects/fate/conf-tmp/
              name: python-confs
            - mountPath: /data/projects/spark-2.4.1-bin-hadoop2.7/conf/spark-defaults-template.conf
              name: python-confs
              subPath: spark-defaults.conf
            - mountPath: /data/projects/fate/conf/rabbitmq_route_table
              name: rabbitmq-route-table
            - mountPath: /data/projects/fate/conf/pulsar_route_table
              name: pulsar-route-table
            # TODO add mountPath of job and model-cache 
            - mountPath: /data/projects/fate/jobs
              name: python-data
              subPath: jobs
            - mountPath: /data/projects/fate/model_local_cache
              name: python-data
              subPath: model-local-cache
        {{- if .Values.modules.fateboard.include }}
        - image: {{ .Values.image.registry }}/fateboard:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: fateboard
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: /data/projects/fate/fateboard/conf/application.properties
              name: fateboard-confs
              subPath: application.properties
            - name: python-data
              mountPath: /data/projects/fate/fate_flow/logs
              subPath: logs
        {{- end }}
      {{- with .Values.modules.python.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.modules.python.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.modules.python.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 6 }}
      {{- end }}
{{- if .Values.modules.python.serviceAccountName }}
      serviceAccountName: {{ .Values.modules.python.serviceAccountName }}
{{- else }}
      serviceAccountName: {{ template "serviceAccountName" . }}
{{- end }}
      restartPolicy: Always
      volumes:
        - name: eggroll-confs
          configMap:
            name: eggroll-config
        - name: python-confs
          configMap:
            name: python-config
        - name: rabbitmq-route-table
          configMap:
            name: rabbitmq-route-table
        - name: pulsar-route-table
          configMap:
            name: pulsar-route-table
        - name: fateboard-confs
          configMap:
            name: fateboard-config
        {{- if not .Values.persistence.enabled }}
        - name: python-data
          emptyDir: {}
        {{- else }}
        - name: python-data
          persistentVolumeClaim:
            claimName: {{ .Values.modules.python.existingClaim | default  "python-data" }}
        {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: fateflow
  labels:
    fateMoudle: fateflow
{{ include "fate.labels" . | indent 4 }}
spec:
  ports:
    - name: "tcp-grpc"
      port: 9360
      targetPort: 9360
      protocol: TCP
    - name: "tcp-http"
      port: 9380
      targetPort: 9380
      protocol: TCP
  type: ClusterIP
  selector:
    fateMoudle: python
{{ include "fate.matchLabels" . | indent 4 }}
---
apiVersion: v1
kind: Service
metadata:
  name: fateflow-client
  labels:
    fateMoudle: fateflow
{{ include "fate.labels" . | indent 4 }}
spec:
  ports:
    - name: "tcp-grpc"
      port: 9360
      targetPort: 9360
      {{- if eq .Values.modules.python.type "NodePort" "LoadBalancer" }}
      nodePort: {{ .Values.modules.python.grpcNodePort }}
      {{- end }}
      protocol: TCP
    - name: "tcp-http"
      port: 9380
      targetPort: 9380
      {{- if eq .Values.modules.python.type "NodePort" "LoadBalancer" }}
      nodePort: {{ .Values.modules.python.httpNodePort }}
      {{- end }}
      protocol: TCP
  type: {{ .Values.modules.python.type }}
  
  {{- if .Values.modules.python.loadBalancerIP }}
  loadBalancerIP: "{{ .Values.modules.python.loadBalancerIP }}"
  {{- end }}
  
  selector:
    fateMoudle: python
{{ include "fate.matchLabels" . | indent 4 }}
---
{{- if and .Values.modules.python.spark.portMaxRetries (ne (print .Values.modules.python.spark.driverHost) "fateflow") }}
apiVersion: v1
kind: Service
metadata:
  name: fateflow-sparkdriver
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
spec:
  ports:
    {{ $spark := .Values.modules.python.spark }}
    {{- range .Values.modules.python.spark.portMaxRetries | int | until }}
    - name: "spark-driver-port-{{ . }}"
      port: {{ $spark.driverStartPort | int | add . }}
      targetPort: {{ $spark.driverStartPort | int | add .  }}
      {{- if eq $spark.driverHostType "NodePort" "LoadBalancer" }}
      nodePort: {{ $spark.driverStartPort | int | add .  }}
      {{- end }}
      protocol: TCP
    - name: "spark-block-manager-port-{{ . }}"
      port: {{ $spark.blockManagerStartPort  | int | add . }}
      targetPort: {{ $spark.blockManagerStartPort  | int | add . }}
      {{- if eq $spark.driverHostType "NodePort" "LoadBalancer" }}
      nodePort: {{ $spark.blockManagerStartPort  | int | add . }}
      {{- end }}
      protocol: TCP
    {{- end }}
  type: {{ .Values.modules.python.spark.driverHostType }}
  selector:
    fateMoudle: python
{{ include "fate.matchLabels" . | indent 4 }}
---
{{- end }}

{{- if .Values.modules.fateboard.include }}
apiVersion: v1
kind: Service
metadata:
  name: fateboard
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
spec:
  ports:
    - name: "tcp-fateboard"
      port: 8080
      targetPort: 8080
      protocol: TCP
  type: {{ .Values.modules.fateboard.type }}
  selector:
    fateMoudle: python
{{ include "fate.matchLabels" . | indent 4 }}
---
{{- end }}
{{- if and .Values.persistence.enabled (not .Values.modules.python.existingClaim) }}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: python-data
  labels:
    fateMoudle: python
{{ include "fate.labels" . | indent 4 }}
spec:
  accessModes: 
    - {{ .Values.modules.python.accessMode }}
  resources:
    requests:
      storage: {{ .Values.modules.python.size }}
  {{- if .Values.modules.python.storageClass }}
    {{- if eq "-" .Values.modules.python.storageClass }}
  storageClassName: ""
    {{- else }}
  storageClassName: {{ .Values.modules.python.storageClass }}
    {{- end }}
  {{- end }}
{{- end }}
{{ end }}
