########################################################
# Copyright 2019-2020 program was created VMware, Inc. #
# SPDX-License-Identifier: Apache-2.0                  #
########################################################

kind: ConfigMap
apiVersion: v1
metadata:
  name: proxy-config
data:
  proxy.properties: |
    coordinator={{ .Values.partyId }}
    ip=0.0.0.0
    port=9370
    route.table=/data/projects/fate/proxy/conf/route_table.json
    #server.crt=/Users/max-webank/Projects/fdn/fdn-proxy/src/main/resources/certs/server.crt
    #server.key=/Users/max-webank/Projects/fdn/fdn-proxy/src/main/resources/certs/server-private.pem
    root.crt=
  route_table.json: |
    {
        "route_table": {
            "default": {
                "default": [
                    {
                      {{- if .Values.exchange -}}
                        "ip": "{{ .Values.exchange.partyIp }}",
                        "port": {{ .Values.exchange.partyPort }}
                      {{- else -}}
                        "ip": "proxy",
                        "port": 9370
                      {{- end -}}
                    }
                ]
            },
            {{- range .Values.partyList }}
            "{{ .partyId }}": {
                "default": [
                    {
                        "ip": "{{ .partyIp }}",
                        "port": "{{ .partyPort }}"
                    }
                ]
            },
            {{- end }}
            "{{ .Values.partyId }}": {
                "fate": [
                    {
                        "ip": "{{ .Values.modules.federation.ip }}",
                        "port": 9394
                    }
                ],
                "fateflow": [
                    {
                        "ip": "{{ .Values.modules.fateflow.ip }}",
                        "port": 9360
                    }
                ]
            }
        },
        "permission": {
            "default_allow": true
        }
    }
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: egg-config
data:
  egg.properties: |
    party.id={{ .Values.partyId }}
    service.port=7888
    eggroll.computing.engine.names=processor
    eggroll.computing.processor.bootstrap.script=/data/projects/fate/eggroll/egg/conf/processor-starter.sh
    eggroll.computing.processor.start.port=50000
    eggroll.computing.processor.venv=/data/projects/python/venv
    eggroll.computing.processor.engine-path=/data/projects/fate/eggroll/python/eggroll/computing/processor.py
    eggroll.computing.processor.data-dir=/data/projects/fate/data-dir
    eggroll.computing.processor.logs-dir=/data/projects/fate/eggroll/python/eggroll/logs/processor
    eggroll.computing.processor.session.max.count=16
    eggroll.computing.processor.python-path=/data/projects/fate/python:/data/projects/fate/eggroll/python
  processor-starter.sh: |
    #!/bin/bash
    
    ONE_ARG_LIST=(
        "venv"
        "python-path"
        "engine-path"
        "port"
        "data-dir"
        "logs-dir"
        "node-manager"
        "engine-addr"
    )
    
    opts=$(getopt \
        --longoptions "$(printf "%s:," "${ONE_ARG_LIST[@]}")" \
        --name "$(basename "$0")" \
        --options "" \
        -- "$@"
    )
    
    while [[ $# -gt 0 ]]; do
       case "$1" in
            --venv)
                venv=$2
                shift 2
                ;;
            --python-path)
                python_path=$2
                shift 2
                ;;
            --engine-path)
                engine_path=$2
                shift 2
                ;;
            --port)
                port=$2
                shift 2
                ;;
            --data-dir)
                data_dir=$2
                shift 2
                ;;
            --logs-dir)
                logs_dir=$2
                shift 2
                ;;
            --node-manager)
                node_manager=$2
                shift 2
                ;;
            --engine-addr)
                engine_addr=$2
                shift 2
                ;;
            *)
                break
                ;;
        esac
    done
    
    source ${venv}/bin/activate
    export PYTHONPATH=$PYTHONPATH:${python_path}
    PYTHON=${venv}/bin/python
    cmd="python ${engine_path} -p ${port} -d ${data_dir} -m ${node_manager} -a $(hostname -I | awk '{print $1}')"
    
    mkdir -p ${logs_dir}
    ${cmd} >> ${logs_dir}/processor-${port}.log 2>&1
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: python-config
data:
  server_conf.json: |
    {
        "servers": {
            "proxy": {
                "host": "{{ .Values.modules.proxy.ip }}", 
                "port": 9370
            }, 
            "fateboard": {
                "host": "{{ .Values.modules.fateboard.ip }}", 
                "port": 8080
            }, 
            "roll": {
                "host": "{{ .Values.modules.roll.ip }}", 
                "port": 8011
            }, 
            "fateflow": {
                "host": "{{ .Values.modules.fateflow.ip }}", 
                "grpc.port": 9360,
                "http.port": 9380
            }, 
            "federation": {
                "host": "{{ .Values.modules.federation.ip }}", 
                "port": 9394
            }
        }
    }
  settings.py: |
    # -*- coding: utf-8 -*-
    import os
    
    from arch.api.utils import file_utils
    from arch.api.utils import log_utils
    from fate_flow.entity.runtime_config import RuntimeConfig
    from arch.api.utils.core import get_lan_ip
    import __main__
    
    from fate_flow.utils.setting_utils import CenterConfig
    
    log_utils.LoggerFactory.set_directory(os.path.join(file_utils.get_project_base_directory(), 'logs', 'fate_flow'))
    stat_logger = log_utils.getLogger("fate_flow_stat")
    detect_logger = log_utils.getLogger("fate_flow_detect")
    access_logger = log_utils.getLogger("fate_flow_access")
    
    '''
    Constants
    '''
    
    API_VERSION = "v1"
    ROLE = 'fateflow'
    SERVERS = 'servers'
    SERVINGS_ZK_PATH = '/FATE-SERVICES/serving/online/publishLoad/providers'
    FATE_FLOW_ZK_PATH = '/FATE-SERVICES/flow/online/transfer/providers'
    MAIN_MODULE = os.path.relpath(__main__.__file__)
    SERVER_MODULE = 'fate_flow_server.py'
    TASK_EXECUTOR_MODULE = 'driver/task_executor.py'
    MAX_CONCURRENT_JOB_RUN = 5
    MAX_CONCURRENT_JOB_RUN_HOST = 10
    DEFAULT_WORKFLOW_DATA_TYPE = ['train_input', 'data_input', 'id_library_input', 'model', 'predict_input',
                                  'predict_output', 'evaluation_output', 'intersect_data_output']
    _ONE_DAY_IN_SECONDS = 60 * 60 * 24
    DEFAULT_GRPC_OVERALL_TIMEOUT = 60 * 1000  # ms
    HEADERS = {
        'Content-Type': 'application/json',
    }
    
    IP = '0.0.0.0'
    GRPC_PORT = 9360
    HTTP_PORT = 9380
    ZOOKEEPER_HOSTS = ['127.0.0.1:2181']
    # standalone job will be send to the standalone job server when FATE-Flow work on cluster deploy mode,
    # but not the port for FATE-Flow on standalone deploy mode.
    CLUSTER_STANDALONE_JOB_SERVER_PORT = 9381
    WORK_MODE = 1
    USE_LOCAL_DATABASE = True
    USE_AUTHENTICATION = False
    USE_CONFIGURATION_CENTER = False
    PRIVILEGE_COMMAND_WHITELIST = ['save_pipeline', 'clean']
    
    DATABASE = {
        'name': '{{ .Values.mysql.mysql_database | default "fate" }}',
        'user': '{{ .Values.mysql.mysql_user | default "fate" }}',
        'passwd': '{{ .Values.mysql.mysql_password | default "fate_dev" }}',
        'host': '{{ .Values.modules.mysql.ip }}',
        'port': 3306,
        'max_connections': 100,
        'stale_timeout': 30,
    }
    
    REDIS = {
        'host': '{{ .Values.modules.redis.ip }}',
        'port': 6379,
        'password': '{{ .Values.redis.requirepass | default "fate_dev" }}',
        'max_connections': 500
    }
    
    REDIS_QUEUE_DB_INDEX = 0
    
    """
    Services
    """
    server_conf = file_utils.load_json_conf("arch/conf/server_conf.json")
    PROXY_HOST = server_conf.get(SERVERS).get('proxy').get('host')
    PROXY_PORT = server_conf.get(SERVERS).get('proxy').get('port')
    BOARD_HOST = server_conf.get(SERVERS).get('fateboard').get('host')
    if BOARD_HOST == 'localhost':
        BOARD_HOST = get_lan_ip()
    BOARD_PORT = server_conf.get(SERVERS).get('fateboard').get('port')
    SERVINGS = CenterConfig.get_settings(path='/servers/servings', servings_zk_path=SERVINGS_ZK_PATH,
                                         use_zk=USE_CONFIGURATION_CENTER, hosts=ZOOKEEPER_HOSTS)
    BOARD_DASHBOARD_URL = 'http://%s:%d/index.html#/dashboard?job_id={}&role={}&party_id={}' % (BOARD_HOST, BOARD_PORT)
    RuntimeConfig.init_config(WORK_MODE=WORK_MODE)
    RuntimeConfig.init_config(HTTP_PORT=HTTP_PORT)
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: redis-config
data:
  redis.conf: |
    bind 0.0.0.0
    databases 50
    always-show-logo yes
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: meta-service-config
  namespace: {{ .Namespace }}
data:
  meta-service.properties: |
    party.id={{ .Values.partyId }}
    service.port=8590
    
    jdbc.driver.classname=com.mysql.cj.jdbc.Driver
    jdbc.url=jdbc:mysql://{{ .Values.modules.mysql.ip }}:3306/{{ .Values.mysql.mysql_database | default "fate" }}?useSSL=false&serverTimezone=UTC&characterEncoding=utf8&allowPublicKeyRetrieval=true
    jdbc.username={{ .Values.mysql.mysql_user | default "fate" }}
    jdbc.password={{ .Values.mysql.mysql_password | default "fate_dev" }}
    target.project=meta-service
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: federation-config
data:
  federation.properties: |
    party.id={{ .Values.partyId }}
    service.port=9394
    meta.service.ip={{ .Values.modules.metaService.ip }}
    meta.service.port=8590
    proxy.ip={{ .Values.modules.proxy.ip }}
    proxy.port=9370
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: fateboard-config
  namespace: {{ .Namespace }}
data:
  application.properties: |
    server.port=8080
    fateflow.url=http://{{ .Values.modules.fateflow.ip }}:9380
    spring.datasource.driver-Class-Name=com.mysql.cj.jdbc.Driver
    management.endpoints.web.exposure.include=*
    spring.http.encoding.charset=UTF-8
    spring.http.encoding.enabled=true
    server.tomcat.uri-encoding=UTF-8
    spring.datasource.url=jdbc:mysql://{{ .Values.modules.mysql.ip }}:3306/{{ .Values.mysql.mysql_database | default "fate" }}?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&serverTimezone=GMT%2B8
    spring.datasource.username={{ .Values.mysql.mysql_user | default "fate" }}
    spring.datasource.password={{ .Values.mysql.mysql_password | default "fate_dev" }}
    server.tomcat.max-threads=1000
    server.tomcat.max-connections=20000
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: roll-config
data:
  roll.properties: |
    party.id={{ .Values.partyId }}
    service.port=8011
    meta.service.ip={{ .Values.modules.metaService.ip }}
    meta.service.port=8590
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mysql-config
data:
  create-meta-service.sql: |
    -- insertSelective database if not exists
    CREATE DATABASE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`;
    
    USE `{{ .Values.mysql.mysql_database | default "fate" }}`;
    -- insertSelective table for fdn_meta
    
    -- table
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (
      `table_id` SERIAL PRIMARY KEY,
      `namespace` VARCHAR(2000) NOT NULL DEFAULT 'DEFAULT',
      `table_name` VARCHAR(2000) NOT NULL,
      `table_type` VARCHAR(255) NOT NULL,
      `total_fragments` INT UNSIGNED NOT NULL,
      `dispatcher` VARCHAR(2000) NOT NULL DEFAULT 'DEFAULT',
      `serdes` VARCHAR(2000) NOT NULL DEFAULT 'MOD',
      `storage_version` INT UNSIGNED NOT NULL DEFAULT 0,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
        
    CREATE UNIQUE INDEX `idx_u_table_n_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`namespace`(100), `table_name`(600), `table_type`(68));
    CREATE INDEX `idx_table_np` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`namespace`(768));
    CREATE INDEX `idx_table_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`table_name`(768));
    CREATE INDEX `idx_table_tt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`table_type`(255));
    CREATE INDEX `idx_table_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`status`(255));
    CREATE INDEX `idx_table_sd` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`serdes`(768));
    CREATE INDEX `idx_table_sv` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`storage_version`);
    
    
    -- fragment
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (
      `fragment_id` SERIAL PRIMARY KEY,
      `table_id` BIGINT UNSIGNED NOT NULL,
      `node_id` BIGINT UNSIGNED NOT NULL,
      `fragment_order` INT UNSIGNED NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE UNIQUE INDEX `idx_u_fragment_ti_ni_fo` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`table_id`, `node_id`, `fragment_order`);
    CREATE INDEX `idx_fragment_ti` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`table_id`);
    CREATE INDEX `idx_fragment_ni` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`node_id`);
    CREATE INDEX `idx_fragment_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`status`(255));
    
    
    -- node
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (
      `node_id` SERIAL PRIMARY KEY,
      `host` VARCHAR(1000),
      `ip` VARCHAR(255) NOT NULL,
      `port` INT NOT NULL,
      `type` VARCHAR(255) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `last_heartbeat_at` DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE INDEX `idx_node_h` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`host`(768));
    CREATE INDEX `idx_node_i` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`ip`(255));
    CREATE INDEX `idx_node_t` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`type`(255));
    CREATE INDEX `idx_node_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`status`(255));
    
    
    -- task
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (
      `task_id` SERIAL PRIMARY KEY,
      `task_name` VARCHAR(2000) NOT NULL,
      `task_type` VARCHAR(255) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE UNIQUE INDEX `idx_u_task_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`task_name`(768));
    CREATE INDEX `idx_task_tt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`task_type`(255));
    CREATE INDEX `idx_task_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`status`(255));
    
    -- result
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (
      `result_id` SERIAL PRIMARY KEY,
      `result_name` VARCHAR(2000),
      `result_type` VARCHAR(2000) NOT NULL,
      `value` VARCHAR(10000) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `task_id` BIGINT UNSIGNED,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    
    CREATE INDEX `idx_result_rn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`result_name`(768));
    CREATE INDEX `idx_result_rt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`result_type`(768));
    CREATE INDEX `idx_result_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`status`(255));
    CREATE INDEX `idx_result_ti` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`task_id`);
    
  insert-node.sql: |
    use {{ .Values.mysql.mysql_database | default "fate" }};
    INSERT INTO node (ip, port, type, status) values ('{{ .Values.modules.roll.ip }}', '8011', 'ROLL', 'HEALTHY');
    INSERT INTO node (ip, port, type, status) values ('{{ .Values.modules.proxy.ip }}', '9370', 'PROXY', 'HEALTHY');
    {{- range .Values.eggList }}
    INSERT INTO node (ip, port, type, status) values ('{{ .egg }}', '7888', 'EGG', 'HEALTHY');
    INSERT INTO node (ip, port, type, status) values ('{{ .egg }}', '7778', 'STORAGE', 'HEALTHY');
    {{- end }}
    show tables;
    select * from node;
---
