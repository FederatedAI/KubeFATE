########################################################
# Copyright 2019-2020 program was created VMware, Inc. #
# SPDX-License-Identifier: Apache-2.0                  #
########################################################

kind: ConfigMap
apiVersion: v1
metadata:
  name: proxy-config
data:
  proxy.properties: |
    coordinator={{ .Values.partyId }}
    ip=0.0.0.0
    port=9370
    route.table=/data/projects/fate/proxy/conf/route_table.json
    #server.crt=/Users/max-webank/Projects/fdn/fdn-proxy/src/main/resources/certs/server.crt
    #server.key=/Users/max-webank/Projects/fdn/fdn-proxy/src/main/resources/certs/server-private.pem
    root.crt=
  route_table.json: |
    {
        "route_table": {
            "default": {
                "default": [
                    {
                        "ip": "{{ .Values.exchange.partyIp }}",
                        "port": {{ .Values.exchange.partyPort }}
                    }
                ]
            },
            "{{ .Values.partyId }}": {
                "serving": [
                    {
                        "ip": "serving-server",
                        "port": 8001
                    }
                ],
                "fate": [
                    {
                        "ip": "federation",
                        "port": 9394
                    }
                ],
                "fateflow": [
                    {
                        "ip": "fateflow",
                        "port": 9360
                    }
                ]
            }
        },
        "permission": {
            "default_allow": true
        }
    }
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: egg-config
data:
  egg.properties: |
    party.id={{ .Values.partyId }}
    service.port=7888
    processor.log.dir=/data/projects/fate/python
    processor.venv=/data/projects/fate/venv
    processor.path=/data/projects/fate/python/arch/processor/processor.py
    python.path=/data/projects/fate/python
    data.dir=/data/projects/fate/data-dir
    max.processors.count=16
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: python-config
data:
  server_conf.json: |
    {
        "party_id": "{{ .Values.partyId }}",
        "servers": {
            "federation": {
                "host": "federation",
                "port": 9394
            },
            "fateboard": {
                "host": "fateboard",
                "port": 8080
            },
            "proxy": {
                "host": "proxy",
                "port": 9370
            },
            "servings": [
                "serving-server:8001"
            ],
            "roll": {
                "host": "roll",
                "port": 8011
            },
            "fateflow": {
                "host": "fateflow",
                "grpc.port": 9360,
                "http.port": 9380
            }
        }
    }
  settings.py: |
    # -*- coding: utf-8 -*-
    import os

    from arch.api.utils import file_utils
    from arch.api.utils import log_utils
    from fate_flow.entity.runtime_config import RuntimeConfig
    from arch.api.utils.core import get_lan_ip
    import __main__

    log_utils.LoggerFactory.set_directory(os.path.join(file_utils.get_project_base_directory(), 'logs', 'fate_flow'))
    stat_logger = log_utils.getLogger("fate_flow_stat")
    schedule_logger = log_utils.getLogger("fate_flow_schedule")
    detect_logger = log_utils.getLogger("fate_flow_detect")
    access_logger = log_utils.getLogger("fate_flow_access")

    '''
    Constants
    '''

    API_VERSION = "v1"
    ROLE = 'fateflow'
    SERVERS = 'servers'
    MAIN_MODULE = os.path.relpath(__main__.__file__)
    SERVER_MODULE = 'fate_flow_server.py'
    TASK_EXECUTOR_MODULE = 'driver/task_executor.py'
    MAX_CONCURRENT_JOB_RUN = 5
    DEFAULT_WORKFLOW_DATA_TYPE = ['train_input', 'data_input', 'id_library_input', 'model', 'predict_input', 'predict_output', 'evaluation_output', 'intersect_data_output']
    _ONE_DAY_IN_SECONDS = 60 * 60 * 24
    DEFAULT_GRPC_OVERALL_TIMEOUT = 60 * 1000  # ms
    HEADERS = {
        'Content-Type': 'application/json',
    }

    PARTY_ID = "{{ .Values.partyId }}"
    IP = '0.0.0.0'
    GRPC_PORT = 9360
    HTTP_PORT = 9380
    CLUSTER_STANDALONE_JOB_SERVER_PORT = 9381
    WORK_MODE = 1
    USE_LOCAL_DATABASE = False
    SERVER_HOST_URL = "http://0.0.0.0:{}".format(HTTP_PORT)

    DATABASE = {
        'name': '{{ .Values.mysql.mysql_database | default "fate" }}',
        'user': '{{ .Values.mysql.mysql_user | default "fate" }}',
        'passwd': '{{ .Values.mysql.mysql_password | default "fate_dev" }}',
        'host': 'mysql',
        'port': 3306,
        'max_connections': 100,
        'stale_timeout': 30,
    }

    REDIS = {
        'host': 'redis',
        'port': 6379,
        'password': '{{ .Values.redis.requirepass | default "fate_dev" }}',
        'max_connections': 500
    }

    REDIS_QUEUE_DB_INDEX = 0
    JOB_MODULE_CONF = file_utils.load_json_conf("fate_flow/job_module_conf.json")

    server_conf = file_utils.load_json_conf("arch/conf/server_conf.json")
    SERVINGS = server_conf.get(SERVERS).get('servings')

    PROXY_HOST = server_conf.get(SERVERS).get('proxy').get('host')
    PROXY_PORT = server_conf.get(SERVERS).get('proxy').get('port')
    BOARD_HOST = server_conf.get(SERVERS).get('fateboard').get('host')
    if BOARD_HOST == 'localhost':
      BOARD_HOST = get_lan_ip()
    BOARD_PORT = server_conf.get(SERVERS).get('fateboard').get('port')
    BOARD_DASHBOARD_URL = 'http://%s:%d/index.html#/dashboard?job_id={}&role={}&party_id={}' % (BOARD_HOST, BOARD_PORT)

    RuntimeConfig.init_config(WORK_MODE=WORK_MODE)
    RuntimeConfig.init_config(HTTP_PORT=HTTP_PORT)
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: serving-server-config
data:
  serving-server.properties: |
    coordinator=webank
    ip=0.0.0.0
    port=8001
    workMode=1
    inferenceWorkerThreadNum=10
    #storage
    # maybe python/data/
    standaloneStoragePath=
    # cache
    remoteModelInferenceResultCacheSwitch=true
    # in-process cache
    modelCacheAccessTTL=12
    modelCacheMaxSize=50
    remoteModelInferenceResultCacheTTL=300
    remoteModelInferenceResultCacheMaxSize=10000
    inferenceResultCacheTTL=30
    inferenceResultCacheCacheMaxSize=1000
    # external cache
    redis.ip=redis
    redis.port=6379
    redis.password={{ .Values.redis.requirepass | default "fate_dev" }}
    redis.timeout=10
    redis.maxTotal=100
    redis.maxIdle=100
    external.remoteModelInferenceResultCacheTTL=86400
    external.remoteModelInferenceResultCacheDBIndex=1,10
    external.inferenceResultCacheTTL=300
    external.inferenceResultCacheDBIndex=0
    canCacheRetcode=0,102
    # federation
    party.id={{ .Values.partyId }}
    # adapter
    OnlineDataAccessAdapter=TestFile
    InferencePostProcessingAdapter=PassPostProcessing
    InferencePreProcessingAdapter=PassPreProcessing
    # external subsystem
    proxy=proxy:9370
    roll=roll:8011

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: redis-config
data:
  redis.conf: |
    bind 0.0.0.0
    databases 50
    always-show-logo yes
    
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: meta-service-config
  namespace: {{ .Namespace }}
data:
  meta-service.properties: |
    party.id={{ .Values.partyId }}
    service.port=8590
  jdbc.properties: |
    jdbc.driver.classname=com.mysql.cj.jdbc.Driver
    jdbc.url=jdbc:mysql://mysql:3306/{{ .Values.mysql.mysql_database | default "fate" }}?useSSL=false&serverTimezone=UTC&characterEncoding=utf8&allowPublicKeyRetrieval=true
    jdbc.username={{ .Values.mysql.mysql_user | default "fate" }}
    jdbc.password={{ .Values.mysql.mysql_password | default "fate_dev" }}
    target.project=meta-service
    
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: federation-config
data:
  federation.properties: |
    party.id={{ .Values.partyId }}
    service.port=9394
    meta.service.ip=meta-service
    meta.service.port=8590
    
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: fateboard-config
  namespace: {{ .Namespace }}
data:
  application.properties: |
    server.port=8080
    fateflow.url=http://fateflow:9380
    spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
    management.endpoints.web.exposure.include=*
    spring.http.encoding.charset=UTF-8
    spring.http.encoding.enabled=true
    server.tomcat.max-threads=1000
    server.tomcat.max-connections=20000
    server.tomcat.uri-encoding=UTF-8
    spring.datasource.url=jdbc:mysql://mysql:3306/{{ .Values.mysql.mysql_database | default "fate" }}?characterEncoding=utf8&characterSetResults=utf8&autoReconnect=true&failOverReadOnly=false&serverTimezone=GMT%2B8
    spring.datasource.username={{ .Values.mysql.mysql_user | default "fate" }}
    spring.datasource.password={{ .Values.mysql.mysql_password | default "fate_dev" }}
    
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: roll-config
data:
  roll.properties: |
    party.id={{ .Values.partyId }}
    service.port=8011
    meta.service.ip=meta-service
    meta.service.port=8590
    
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: mysql-config
data:
  config.sql: |
    CREATE DATABASE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`;
    USE `{{ .Values.mysql.mysql_database | default "fate" }}`;
    -- insertSelective table for fdn_meta
    -- table
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (
      `table_id` SERIAL PRIMARY KEY,
      `namespace` VARCHAR(2000) NOT NULL DEFAULT 'DEFAULT',
      `table_name` VARCHAR(2000) NOT NULL,
      `table_type` VARCHAR(255) NOT NULL,
      `total_fragments` INT UNSIGNED NOT NULL,
      `dispatcher` VARCHAR(2000) NOT NULL DEFAULT 'DEFAULT',
      `serdes` VARCHAR(2000) NOT NULL DEFAULT 'MOD',
      `storage_version` INT UNSIGNED NOT NULL DEFAULT 0,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE UNIQUE INDEX `idx_u_table_n_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`namespace`(100), `table_name`(600), `status`(68));
    CREATE INDEX `idx_table_np` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`namespace`(768));
    CREATE INDEX `idx_table_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`table_name`(768));
    CREATE INDEX `idx_table_tt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`table_type`(255));
    CREATE INDEX `idx_table_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`status`(255));
    CREATE INDEX `idx_table_sd` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`serdes`(768));
    CREATE INDEX `idx_table_sv` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`dtable` (`storage_version`);
    -- fragment
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (
      `fragment_id` SERIAL PRIMARY KEY,
      `table_id` BIGINT UNSIGNED NOT NULL,
      `node_id` BIGINT UNSIGNED NOT NULL,
      `fragment_order` INT UNSIGNED NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE UNIQUE INDEX `idx_u_fragment_ti_ni_fo` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`table_id`, `node_id`, `fragment_order`);
    CREATE INDEX `idx_fragment_ti` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`table_id`);
    CREATE INDEX `idx_fragment_ni` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`node_id`);
    CREATE INDEX `idx_fragment_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`fragment` (`status`(255));
    -- node
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (
      `node_id` SERIAL PRIMARY KEY,
      `host` VARCHAR(1000),
      `ip` VARCHAR(255) NOT NULL,
      `port` INT NOT NULL,
      `type` VARCHAR(255) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `last_heartbeat_at` DATETIME DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
      `created_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE INDEX `idx_node_h` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`host`(768));
    CREATE INDEX `idx_node_i` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`ip`(255));
    CREATE INDEX `idx_node_t` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`type`(255));
    CREATE INDEX `idx_node_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`node` (`status`(255));
    -- task
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (
      `task_id` SERIAL PRIMARY KEY,
      `task_name` VARCHAR(2000) NOT NULL,
      `task_type` VARCHAR(255) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE UNIQUE INDEX `idx_u_task_tn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`task_name`(768));
    CREATE INDEX `idx_task_tt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`task_type`(255));
    CREATE INDEX `idx_task_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`task` (`status`(255));
    -- result
    CREATE TABLE IF NOT EXISTS `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (
      `result_id` SERIAL PRIMARY KEY,
      `result_name` VARCHAR(2000),
      `result_type` VARCHAR(2000) NOT NULL,
      `value` VARCHAR(10000) NOT NULL,
      `status` VARCHAR(255) NOT NULL,
      `task_id` BIGINT UNSIGNED,
      `created_at` DATETIME DEFAULT CURRENT_TIMESTAMP,
      `updated_at` DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    ) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
    CREATE INDEX `idx_result_rn` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`result_name`(768));
    CREATE INDEX `idx_result_rt` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`result_type`(768));
    CREATE INDEX `idx_result_s` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`status`(255));
    CREATE INDEX `idx_result_ti` ON `{{ .Values.mysql.mysql_database | default "fate" }}`.`result` (`task_id`);
    use {{ .Values.mysql.mysql_database | default "fate" }};
    INSERT INTO node (ip, port, type, status) values ('roll', '8011', 'ROLL', 'HEALTHY');
    INSERT INTO node (ip, port, type, status) values ('proxy', '9370', 'PROXY', 'HEALTHY');
    {{- range .Values.eggList }}
    INSERT INTO node (ip, port, type, status) values ('{{ .egg }}', '7888', 'EGG', 'HEALTHY');
    INSERT INTO node (ip, port, type, status) values ('{{ .egg }}', '7778', 'STORAGE', 'HEALTHY');
    {{- end }}
---
